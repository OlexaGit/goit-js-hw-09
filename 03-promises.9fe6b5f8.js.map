{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAqCA,SAASC,EAAcC,EAAUC,GAG/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,uBAAqBH,QAAiBC,OAG5CG,EAAK,sBAAoBJ,QAAeC,MAAU,GAGrDA,EAAM,G,CAhDAQ,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAuBC,GACrBA,EAAEC,iBAEF,MAAMC,EAAeF,EAAEG,cAAcC,SAC/BC,EAAUC,OAAOJ,EAAab,MAAMkB,OACpCC,EAAOF,OAAOJ,EAAaM,KAAKD,OAChCE,EAASH,OAAOJ,EAAaO,OAAOF,OAI1C,IAAIG,EAAQL,EACZM,QAAQC,IAAI,SAAUF,GACtB,IAAK,IAAIG,EAAI,EAAGA,EAAIJ,EAAS,EAAGI,GAAK,EACnC1B,EAAc0B,EAAGH,GACdI,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MAGjB0B,EAAA9B,GAAS+B,OAAOC,QACd,uBAAqB7B,QAAiBC,MAAU,IAGnD6B,OAAM,EAAC9B,SAAEA,EAAQC,MAAEA,MAClB0B,EAAA9B,GAAS+B,OAAOG,QACd,sBAAoB/B,QAAiBC,MAAU,IAGrDqB,GAAgBF,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', onClickSubmit);\n\nfunction onClickSubmit(e) {\n  e.preventDefault();\n  // console.log('hi');\n  const formElements = e.currentTarget.elements;\n  const delayEl = Number(formElements.delay.value);\n  const step = Number(formElements.step.value);\n  const amount = Number(formElements.amount.value);\n  // console.log('delay:', delay);\n  // console.log('step:', step);\n  // console.log(amount + 1);\n  let delay = delayEl;\n  console.log('delay:', delay);\n  for (let i = 1; i < amount + 1; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        // console.log('delayCR:', delay);\n        // console.log('position:', position);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.warning(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    delay = delay + step;\n    // console.log('delayEl + step:', delay);\n    // console.log('i:', i);\n  }\n}\n\nfunction createPromise(position, delay) {\n  // console.log('delayCR:', delay);\n  // console.log('position:', position);\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        // Fulfill\n      } else {\n        reject(`❌ Rejected promise ${position} in ${delay}ms`);\n        // Reject\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","formElements","currentTarget","elements","delayEl","Number","value","step","amount","delay1","console","log","i","then","$parcel$interopDefault","Notify","success","catch","warning"],"version":3,"file":"03-promises.9fe6b5f8.js.map"}